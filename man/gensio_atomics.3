.TH gensio_atomics 3 "04 Jan 2025"
.SH NAME
gensio_atomic_init, gensio_atomic_cleanup,
gensio_atomic_set, gensio_atomic_set_mo, gensio_atomic_get,
gensio_atomic_get_mo, gensio_atomic_cas,
gensio_atomic_cas_mo,
gensio_atomic_add, gensio_atomic_add_mo,
gensio_atomic_sub, gensio_atomic_sub_mo,
gensio_atomic_add_if_nz, gensio_atomic_add_if_nz_mo
gensio_atomic_sub_if_nz, gensio_atomic_sub_if_nz_mo
gensio_atomic_inc_if_nz, gensio_atomic_inc_if_nz_mo
gensio_atomic_dec_if_nz, gensio_atomic_dec_if_nz_mo
\- Atomic operations.
.SH "SYNOPSIS"
.B #include <gensio/gensio_atomics.h>
.br
typedef xxx gensio_atomic_uint;
.br
enum gensio_memory_order {
.br
    gensio_mo_relaxed = xxx,
.br
    gensio_mo_consume = xxx,
.br
    gensio_mo_acquire = xxx,
.br
    gensio_mo_release = xxx,
.br
    gensio_mo_acq_rel = xxx,
.br
    gensio_mo_seq_cst = xxx,
.br
};
.br
.TP 20
.B int gensio_atomic_init(o, a, v)
.TP 20
.B void gensio_atomic_cleanup(a)
.TP 20
.B bool gensio_atomic_lockless(a)
.TP 20
.B void gensio_atomic_set(a, v)
.TP 20
.B void gensio_atomic_set_mo(a, v, mo)
.TP 20
.B <type> gensio_atomic_get(a)
.TP 20
.B type gensio_atomic_get_mo(a, mo)
.TP 20
.B bool gensio_atomic_cas(a, expected, desired)
.TP 20
.B bool gensio_atomic_cas_mo(a, expected, desired, succ_mo, fail_mo)
.TP 20
.B <type> gensio_atomic_add(a, v)
.TP 20
.B <type> gensio_atomic_add_mo(a, v, mo)
.TP 20
.B <type> gensio_atomic_sub(a, v)
.TP 20
.B <type> gensio_atomic_sub_mo(a, v, mo)
.TP 20
.B bool gensio_atomic_add_if_nz(a, old, v)
.TP 20
.B bool gensio_atomic_add_if_nz_mo(a, old, v, mo)
.TP 20
.B bool gensio_atomic_sub_if_nz(a, old, v)
.TP 20
.B bool gensio_atomic_sub_if_nz_mo(a, old, v, mo)
.TP 20
.B bool gensio_atomic_inc_if_nz(a, old, v)
.TP 20
.B bool gensio_atomic_inc_if_nz_mo(a, old, mo)
.TP 20
.B bool gensio_atomic_dec_if_nz(a, old, v)
.TP 20
.B bool gensio_atomic_dec_if_nz_mo(a, old, mo)
.SH "DESCRIPTION"
These perform atomic operations.  See the C atomic operations standard
(https://en.cppreference.com/w/c/atomic) for what these do.
Operations ending in
.B _mo
Take a memory ordering value.  Operations not ending in that use the
strongest memory ordering semantics.

You must call
.B gensio_atomic_init()
on an object before using it.  The
.B o
value is an
.B gensio_os_funcs
structure which could be used to allocate memory.  After you are done with it,
you must call
.B gensio_atomic_cleanup()
to free any memory.

The
.B gensio_atomic_lockless()
function returns
.B true
if the atomic operations on the value are lockless, or
.B false
if not.

The operations ending in
.B _if_nz
will perform the operation if the value is not already zero.

All operations with an
.B old
value return the previous value in old.  For the operations ending in
.B _if_nz
the return value in old will be 0 if not successfull, non-zero if
successful.  These function also return true if successful, and false
if not, but you must always pass in old, and it must be the proper
type.

.SH "CAVEATS"
If C standard or GCC atomics are available, those are used, and should
be lockless on most platforms.  If those are not available, a
lock-based version is used.

Currently only uint is implemented, though implementing other types
would be trivial.
.SH "RETURN VALUES"
gensio_atomic_get() and gensio_atomic_get_mo() return the current value.

gensio_atomic_cas() and gensio_atomic_cas_mo() and all the _of_nz
functions return true if successful, false if not.

All other functions/macros do not return values.
.SH "SEE ALSO"
gensio(5)
